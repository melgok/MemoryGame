// <auto-generated />
using MemoryGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemoryGame.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010115551_RenamedTables")]
    partial class RenamedTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemoryGame.Entities.CardEntity", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatched")
                        .HasColumnType("bit");

                    b.Property<int>("PairId")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("PairId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MemoryGame.Entities.GameEntity", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int?>("CurrentPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("MemoryGame.Entities.PairEntity", b =>
                {
                    b.Property<int>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PairId"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PairId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("MemoryGame.Entities.PlayerEntity", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MemoryGame.Entities.ScoreEntity", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("MemoryGame.Entities.CardEntity", b =>
                {
                    b.HasOne("MemoryGame.Entities.PairEntity", "Pair")
                        .WithMany("Cards")
                        .HasForeignKey("PairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("MemoryGame.Entities.GameEntity", b =>
                {
                    b.HasOne("MemoryGame.Entities.PlayerEntity", "CurrentPlayer")
                        .WithMany("CurrentGames")
                        .HasForeignKey("CurrentPlayerId");

                    b.HasOne("MemoryGame.Entities.PlayerEntity", "WinnerPlayer")
                        .WithMany("WonGames")
                        .HasForeignKey("WinnerPlayerId");

                    b.Navigation("CurrentPlayer");

                    b.Navigation("WinnerPlayer");
                });

            modelBuilder.Entity("MemoryGame.Entities.ScoreEntity", b =>
                {
                    b.HasOne("MemoryGame.Entities.GameEntity", "Game")
                        .WithMany("Scores")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryGame.Entities.PlayerEntity", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MemoryGame.Entities.GameEntity", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("MemoryGame.Entities.PairEntity", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MemoryGame.Entities.PlayerEntity", b =>
                {
                    b.Navigation("CurrentGames");

                    b.Navigation("Scores");

                    b.Navigation("WonGames");
                });
#pragma warning restore 612, 618
        }
    }
}
